    " This line should not be removed as it ensures that various options are
    " properly set to work with the Vim-related packages available in Debian.
    runtime! debian.vim

    " Uncomment the next line to make Vim more Vi-compatible
    " NOTE: debian.vim sets 'nocompatible'. Setting 'compatible' changes numerous
    " options, so any other options should be set AFTER setting 'compatible'.
    set nocompatible

	"--pathogen setting--
	execute pathogen#infect()
	syntax on
	filetype plugin indent on

    " Vim5 and later versions support syntax highlighting. Uncommenting the
    " following enables syntax highlighting by default.
    if has("syntax")
      syntax on            " 语法高亮
    endif
    colorscheme ron        " elflord ron peachpuff default 设置配色方案，vim自带的配色方案保存在/usr/share/vim/vim72/colors目录下

    " detect file type
    " filetype on
    " filetype plugin on


    " If using a dark background within the editing area and syntax highlighting
    " turn on this option as well
    set background=dark

    " Uncomment the following to have Vim jump to the last position when
    " reopening a file
    if has("autocmd")
      au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
      "have Vim load indentation rules and plugins according to the detected filetype
      filetype plugin indent on
    endif

    " The following are commented out as they cause vim to behave a lot
    " differently from regular Vi. They are highly recommended though.

    "set ignorecase        " 搜索模式里忽略大小写
    "set smartcase        " 如果搜索模式包含大写字符，不使用 'ignorecase' 选项。只有在输入搜索模式并且打开 'ignorecase' 选项时才会使用。
    set autowrite        " 自动把内容写回文件: 如果文件被修改过，在每个 :next、:rewind、:last、:first、:previous、:stop、:suspend、:tag、:!、:make、CTRL-] 和 CTRL-^命令时进行；用 :buffer、CTRL-O、CTRL-I、'{A-Z0-9} 或 `{A-Z0-9} 命令转到别的文件时亦然。
    set autoindent        " 设置自动对齐(缩进)：即每行的缩进值与上一行相等；使用 noautoindent 取消设置
    "set smartindent        " 智能对齐方式
		set expandtab					" replace tab with spaces
		set list						" enable tab and space show
    set tabstop=2        " 设置制表符(tab键)的宽度
    set softtabstop=2     " 设置软制表符的宽度    
    set shiftwidth=2    " (自动) 缩进使用的4个空格
    set cindent            " 使用 C/C++ 语言的自动缩进方式
    set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s     "设置C/C++语言的具体缩进方式
    "set backspace=2    " 设置退格键可用
    set showmatch        " 设置匹配模式，显示匹配的括号
    set linebreak        " 整词换行
    set whichwrap=b,s,<,>,[,] " 光标从行首和行末时可以跳到另一行去
    "set hidden " Hide buffers when they are abandoned
    set mouse=a            " Enable mouse usage (all modes)    "使用鼠标
    set number            " Enable line number    "显示行号
    "set previewwindow    " 标识预览窗口
    set history=500        " set command history to 50    "历史记录50条


    "--状态行设置--
    set laststatus=2 " 总显示最后一个窗口的状态行；设为1则窗口数多于一个的时候显示最后一个窗口的状态行；0不显示最后一个窗口的状态行
    set ruler            " 标尺，用于显示光标位置的行号和列号，逗号分隔。每个窗口都有自己的标尺。如果窗口有状态行，标尺在那里显示。否则，它显示在屏幕的最后一行上。
    set statusline=%1*%m%*%2*%f%*\ %r%h%w\ %5*%{EchoFuncGetStatusLine()}%*\ %=\ %8*[%l,%v]%*\ %9*[%-p%%]%*
    " Color scheme for statusline
    hi User1 ctermfg=0 ctermbg=6
    hi User2 ctermfg=0 ctermbg=7
    hi User5 ctermfg=15 ctermbg=0
    hi User8 ctermfg=0 ctermbg=2
    hi User9 ctermfg=0 ctermbg=2

    "--命令行设置--
    set showcmd            " 命令行显示输入的命令
    set showmode        " 命令行显示vim当前模式

    "--find setting--
    set incsearch        " 输入字符串就显示匹配点
    set hlsearch        

	" fold setting
	set foldenable
	set foldmethod=indent
	set foldlevel=99
	set foldcolumn=5
	nnoremap <space> za


"--NERDTree--
map <C-n> :NERDTreeToggle<CR>
  "---Shortcut for Buff switch---
  map <C-1> :b 1<CR>
  map <C-2> :b 2<CR>
  map <C-3> :b 3<CR>
  map <C-4> :b 4<CR>
  map <C-5> :b 5<CR>
  map <C-6> :b 6<CR>
  map <C-7> :b 7<CR>
  map <C-8> :b 8<CR>

"---Shortcut for  Update Modified Time---
map <C-u> :call UpdateModifiedDate()<CR>

"-miniBuff--
let g:miniBufExplMaxSize = 2

"--tagList setting--
let Tlist_Show_One_File=1    " 只展示一个文件的taglist
let Tlist_Exit_OnlyWindow=1  " 当taglist是最后以个窗口时自动退出
let Tlist_Use_Right_Window=1 " 在右边显示taglist窗口
let Tlist_Sort_Type="name"   " tag按名字排序
map <C-t> :TlistToggle<CR>

"--omnicppcomplete setting--
filetype plugin indent on
set completeopt=longest,menu
let OmniCpp_NamespaceSearch = 2     " search namespaces in the current buffer   and in included files
let OmniCpp_ShowPrototypeInAbbr = 1 " 显示函数参数列表
let OmniCpp_MayCompleteScope = 1    " 输入 :: 后自动补全
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]"]"

"--ctags for omnicppcomplete
set tags+=./tags;,~/.vim/tags/cpp_src/tags,~/.vim/systags,tags

" Added by Aliben for highlighting in CMakelists.txt
au BufRead,BufNewFile cmakelists.txt,Cmakelist.txt,CMakelists.txt,*.cmake,CMakeLists.txt set filetype=cmake
au BufRead,BufNewFile *.yaml,*.launch,*.xml,*.xacro set filetype=xml
autocmd BufRead,BufNewFile *.bin,*.img exec ":%!xxd"
autocmd BufWritePre *.h,*.hh,*.hpp,*.c,*.cc,*.cpp,CMakeLists.txt call UpdateModifiedDate()
autocmd BufWritePre *.bash,*.sh call UpdateModifiedDate()

" Added by Aliben for auto importing template with *.cc *.cpp *.h *.hh *.c *.cxx
"------------- There are some dynamic template using bash to generate
" au BufNewFile *.c,*.cc,*.cpp,*.cxx,*.h,*.hh 0r /Users/aliben/.vim/template/c_cpp.tlp
" au BufNewFile *.cc,*.c,*.cxx,*.cpp,*.h,*.hh 0r $HOME/.vim/templates/c_cpp.tlp


" Set global variable for dynamic template
let g:enable_template=1
let g:template_dir="$HOME/.vim/template"
let g:C_SourceCodeExtensions = '' " Cancel plugin c.vim
  " echoFunc
let g:EchoFuncShowOnStatus = 1
